@using Microsoft.AspNetCore.Components.Forms
@using CryptoTracker.Shared
@using System.Text.Json
@typeparam TEntry

<h3>@Title</h3>

<InputFile OnChange="HandleFileSelected" />
<RadzenDropDown Class="mt-2" Style="width:200px" Data="@Wallets" TextProperty="Name" ValueProperty="Name" @bind-Value="WalletName" Placeholder="Wallet wÃ¤hlen" />
<RadzenButton Class="mt-2" Text="Importieren" Click="Upload" />

@if (Entries == null)
{
    <p>Loading...</p>
}
else if (Entries.Count > 0)
{
    var props = typeof(TEntry).GetProperties();
    var dateProp = props.FirstOrDefault(p => p.PropertyType == typeof(DateTimeOffset) || p.PropertyType == typeof(DateTime));

    var headers = props
        .Where(p => p.Name != "Id" && p.Name != "WalletId")
        .Select(p => p.Name)
        .ToList();

    if (dateProp != null)
    {
        headers.Remove(dateProp.Name);
        headers.Insert(0, dateProp.Name);
    }

    if (headers.Remove("Wallet"))
    {
        headers.Insert(1, "Wallet");
    }

    <div style="overflow-x:auto">
        <RadzenDataGrid TItem="TEntry" Data="Entries" AllowFiltering="true" AllowPaging="false" AllowColumnResize="true">
            <Columns>
                @foreach (var h in headers)
                {
                    <RadzenDataGridColumn TItem="TEntry" Property="@h" Title="@h" />
                }
            </Columns>
        </RadzenDataGrid>
    </div>
}

@if (ErrorMessage != null)
{
    <div class="alert alert-danger" role="alert">@ErrorMessage</div>
}

@code {
    [Parameter] public string Title { get; set; } = string.Empty;

    [Inject] private IWalletApi WalletApi { get; set; } = default!;
    [Inject] private IDataImportApi DataImportApi { get; set; } = default!;
    [Inject] private IImportEntriesApi ImportEntriesApi { get; set; } = default!;

    private IList<TEntry>? Entries;
    private IBrowserFile? SelectedFile;
    private string WalletName { get; set; } = string.Empty;
    private string? ErrorMessage { get; set; }
    private const long MAX_REQUEST_SIZE = 1024 * 1024 * 100;
    private IList<WalletInfoDTO> Wallets { get; set; } = new List<WalletInfoDTO>();

    [Parameter] public ImportDocumentType DocumentType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadData();
        Wallets = await WalletApi.GetWalletInfosAsync();
    }

    private Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;

        int indexOfHashtag = e.File.Name.IndexOf('#');
        if (indexOfHashtag >= 0)
        {
            int indexOfLastDot = e.File.Name.LastIndexOf('.');
            if (indexOfLastDot > indexOfHashtag)
            {
                WalletName = e.File.Name.Substring(indexOfHashtag + 1, indexOfLastDot - indexOfHashtag - 1);
            }
        }

        return Task.CompletedTask;
    }

    private async Task Upload()
    {
        if (SelectedFile != null)
        {
            try
            {
                await DataImportApi.ImportFileAsync(DocumentType, WalletName, SelectedFile);
            }
            catch (Exception ex)
            {
                ErrorMessage = ex.Message;
            }
            SelectedFile = null;
            WalletName = string.Empty;
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        var jsonEntries = await ImportEntriesApi.GetEntriesAsync(DocumentType);
        if (jsonEntries is not null)
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            Entries = jsonEntries
                .Select(e => JsonSerializer.Deserialize<TEntry>(e.GetRawText(), options)!)
                .ToList();


            var dateProp = typeof(TEntry).GetProperties()
                .FirstOrDefault(p => p.PropertyType == typeof(DateTimeOffset) || p.PropertyType == typeof(DateTime));
            if (dateProp != null)
            {
                Entries = Entries.OrderBy(e =>
                {
                    var val = dateProp.GetValue(e);
                    if (val is DateTimeOffset dto) return dto;
                    if (val is DateTime dt) return (DateTimeOffset)dt;
                    return DateTimeOffset.MinValue;
                }).ToList();
            }
        }
        else
        {
            Entries = new List<TEntry>();
        }
    }
}
