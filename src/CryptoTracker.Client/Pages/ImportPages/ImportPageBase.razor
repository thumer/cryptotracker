@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using CryptoTracker.Shared
@using System.Text.Json
@using System.Dynamic

<h3>@Title</h3>

<InputFile OnChange="HandleFileSelected" />
<select class="form-select mt-2" @bind="WalletName">
    <option value="">Wallet w√§hlen</option>
    @foreach (var w in Wallets)
    {
        <option value="@w.Name">@w.Name</option>
    }
</select>
<button class="btn btn-primary mt-2" @onclick="Upload">Importieren</button>

@if (Entries == null)
{
    <p>Loading...</p>
}
else if (Entries.Count > 0)
{
    var headers = ((IDictionary<string, object?>)Entries[0]).Keys.ToList();
    <DataGrid TItem="ExpandoObject" Data="Entries" Filterable="true" FilterMode="DataGridFilterMode.Menu" ShowPager="false">
        <DataGridColumns>
            @foreach (var h in headers)
            {
                <DataGridColumn Field="@h" Caption="@h">
                    <DisplayTemplate Context="entry">
                        @((IDictionary<string, object?>)entry)[h]
                    </DisplayTemplate>
                </DataGridColumn>
            }
        </DataGridColumns>
    </DataGrid>
}

@if (ErrorMessage != null)
{
    <div class="alert alert-danger" role="alert">@ErrorMessage</div>
}

@code {
    [Parameter] public string Title { get; set; } = string.Empty;

    [Inject] private HttpClient HttpClient { get; set; } = default!;

    private IList<ExpandoObject>? Entries;
    private IBrowserFile? SelectedFile;
    private string WalletName { get; set; } = string.Empty;
    private string? ErrorMessage { get; set; }
    private const long MAX_REQUEST_SIZE = 1024 * 1024 * 100;
    private IList<WalletInfoDTO> Wallets { get; set; } = new List<WalletInfoDTO>();

    [Parameter] public ImportDocumentType DocumentType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadData();
        Wallets = await HttpClient.GetFromJsonAsync<IList<WalletInfoDTO>>("api/Wallet/GetWalletInfos") ?? new List<WalletInfoDTO>();
    }

    private Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;

        int indexOfHashtag = e.File.Name.IndexOf('#');
        if (indexOfHashtag >= 0)
        {
            int indexOfLastDot = e.File.Name.LastIndexOf('.');
            if (indexOfLastDot > indexOfHashtag)
            {
                WalletName = e.File.Name.Substring(indexOfHashtag + 1, indexOfLastDot - indexOfHashtag - 1);
            }
        }

        return Task.CompletedTask;
    }

    private async Task Upload()
    {
        if (SelectedFile != null)
        {
            using var content = new MultipartFormDataContent();
            using var fileContent = new StreamContent(SelectedFile.OpenReadStream(MAX_REQUEST_SIZE));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(SelectedFile.ContentType);
            content.Add(fileContent, "file", SelectedFile.Name);
            content.Add(JsonContent.Create(new ImportFileRequest() { Type = DocumentType, WalletName = WalletName }), "request");
            var response = await HttpClient.PostAsync("api/DataImport/ImportFile", content);
            if (!response.IsSuccessStatusCode)
                ErrorMessage = await response.Content.ReadAsStringAsync();
            SelectedFile = null;
            WalletName = string.Empty;
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        var jsonEntries = await HttpClient.GetFromJsonAsync<IList<JsonElement>>($"api/ImportEntries/GetEntries?type={DocumentType}");
        if (jsonEntries is not null)
        {
            Entries = jsonEntries
                .Select(e =>
                {
                    var obj = new ExpandoObject() as IDictionary<string, object?>;
                    foreach (var p in e.EnumerateObject())
                    {
                        if (p.Name == "Id")
                            continue;
                        obj[p.Name] = p.Value.ToString();
                    }
                    return (ExpandoObject)obj;
                })
                .ToList();
        }
        else
        {
            Entries = new List<ExpandoObject>();
        }
    }
}
