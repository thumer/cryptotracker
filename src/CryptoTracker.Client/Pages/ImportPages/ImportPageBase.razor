@using Microsoft.AspNetCore.Components.Forms
@using CryptoTracker.Shared
@using System.Text.Json
@typeparam TEntry

<h3>@Title</h3>

<InputFile OnChange="HandleFileSelected" />
<select class="form-select mt-2" @bind="WalletName">
    <option value="">Wallet w√§hlen</option>
    @foreach (var w in Wallets)
    {
        <option value="@w.Name">@w.Name</option>
    }
</select>
<button class="btn btn-primary mt-2" @onclick="Upload">Importieren</button>

@if (Entries == null)
{
    <p>Loading...</p>
}
else if (Entries.Count > 0)
{
    var headers = typeof(TEntry)
        .GetProperties()
        .Where(p => p.Name != "Id")
        .Select(p => p.Name)
        .ToList();
    <RadzenDataGrid TItem="TEntry" Data="Entries" AllowFiltering="true" AllowPaging="false">
        <Columns>
            @foreach (var h in headers)
            {
                <RadzenDataGridColumn TItem="TEntry" Property="@h" Title="@h" />
            }
        </Columns>
    </RadzenDataGrid>
}

@if (ErrorMessage != null)
{
    <div class="alert alert-danger" role="alert">@ErrorMessage</div>
}

@code {
    [Parameter] public string Title { get; set; } = string.Empty;

    [Inject] private IWalletApi WalletApi { get; set; } = default!;
    [Inject] private IDataImportApi DataImportApi { get; set; } = default!;
    [Inject] private IImportEntriesApi ImportEntriesApi { get; set; } = default!;

    private IList<TEntry>? Entries;
    private IBrowserFile? SelectedFile;
    private string WalletName { get; set; } = string.Empty;
    private string? ErrorMessage { get; set; }
    private const long MAX_REQUEST_SIZE = 1024 * 1024 * 100;
    private IList<WalletInfoDTO> Wallets { get; set; } = new List<WalletInfoDTO>();

    [Parameter] public ImportDocumentType DocumentType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadData();
        Wallets = await WalletApi.GetWalletInfosAsync();
    }

    private Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;

        int indexOfHashtag = e.File.Name.IndexOf('#');
        if (indexOfHashtag >= 0)
        {
            int indexOfLastDot = e.File.Name.LastIndexOf('.');
            if (indexOfLastDot > indexOfHashtag)
            {
                WalletName = e.File.Name.Substring(indexOfHashtag + 1, indexOfLastDot - indexOfHashtag - 1);
            }
        }

        return Task.CompletedTask;
    }

    private async Task Upload()
    {
        if (SelectedFile != null)
        {
            try
            {
                await DataImportApi.ImportFileAsync(DocumentType, WalletName, SelectedFile);
            }
            catch (Exception ex)
            {
                ErrorMessage = ex.Message;
            }
            SelectedFile = null;
            WalletName = string.Empty;
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        var jsonEntries = await ImportEntriesApi.GetEntriesAsync(DocumentType);
        if (jsonEntries is not null)
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            Entries = jsonEntries
                .Select(e => JsonSerializer.Deserialize<TEntry>(e.GetRawText(), options)!)
                .ToList();
        }
        else
        {
            Entries = new List<TEntry>();
        }
    }
}
