@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using CryptoTracker.Shared
@using System.Text.Json

<h3>@Title</h3>

<InputFile OnChange="HandleFileSelected" />
<input class="form-control mt-2" @bind="WalletName" placeholder="Wallet Name" />
<button class="btn btn-primary mt-2" @onclick="Upload">Importieren</button>

@if (Entries == null)
{
    <p>Loading...</p>
}
else if (Entries.Count > 0)
{
    var headers = Entries[0].EnumerateObject().Select(p => p.Name).Where(n => n != "Id").ToList();
    <table class="table table-sm">
        <thead>
            <tr>
                @foreach (var h in headers)
                {
                    <th>@h</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var entry in Entries)
            {
                <tr>
                    @foreach (var h in headers)
                    {
                        <td>@entry.GetProperty(h).ToString()</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@if (ErrorMessage != null)
{
    <div class="alert alert-danger" role="alert">@ErrorMessage</div>
}

@code {
    [Parameter] public string Title { get; set; } = string.Empty;

    [Inject] private HttpClient HttpClient { get; set; } = default!;

    private IList<JsonElement>? Entries;
    private IBrowserFile? SelectedFile;
    private string WalletName { get; set; } = string.Empty;
    private string? ErrorMessage { get; set; }
    private const long MAX_REQUEST_SIZE = 1024 * 1024 * 100;

    [Parameter] public ImportDocumentType DocumentType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadData();
    }

    private Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;

        int indexOfHashtag = e.File.Name.IndexOf('#');
        if (indexOfHashtag >= 0)
        {
            int indexOfLastDot = e.File.Name.LastIndexOf('.');
            if (indexOfLastDot > indexOfHashtag)
            {
                WalletName = e.File.Name.Substring(indexOfHashtag + 1, indexOfLastDot - indexOfHashtag - 1);
            }
        }

        return Task.CompletedTask;
    }

    private async Task Upload()
    {
        if (SelectedFile != null)
        {
            using var content = new MultipartFormDataContent();
            using var fileContent = new StreamContent(SelectedFile.OpenReadStream(MAX_REQUEST_SIZE));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(SelectedFile.ContentType);
            content.Add(fileContent, "\"file\"", SelectedFile.Name);
            content.Add(JsonContent.Create(new ImportFileRequest() { Type = DocumentType, WalletName = WalletName }), "request");
            var response = await HttpClient.PostAsync("api/DataImport/ImportFile", content);
            if (!response.IsSuccessStatusCode)
                ErrorMessage = await response.Content.ReadAsStringAsync();
            SelectedFile = null;
            WalletName = string.Empty;
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        Entries = await HttpClient.GetFromJsonAsync<IList<JsonElement>>($"api/ImportEntries/GetEntries?type={DocumentType}");
    }
}
